// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                String            @id @default(cuid())
  name              String?
  email             String?           @unique
  emailVerified     DateTime?
  image             String?
  role              UserRole          @default(USER)
  credits           Int               @default(1000)    // Legacy field (will be migrated)
  accounts          Account[]
  sessions          Session[]
  prompts           Prompt[]
  flows             PromptFlow[]
  favorites         Favorite[]
  createdPrompts    Prompt[]          @relation("CreatedPrompts")
  createdFlows      PromptFlow[]      @relation("CreatedFlows")
  creditTransactions CreditTransaction[] // Relation to credit transactions
  flowUnlocks       FlowUnlock[]      // Relation to unlocked flows
  promptRuns        PromptRun[]       // Relation to prompt runs
  creditBuckets     CreditBucket[]    // Relation to credit buckets
  creditBonuses     CreditBonus[]     // Relation to credit bonuses
  creatorTransactions CreditTransaction[] @relation("CreatorTransactions") // Transactions where user is the creator
  lastLogin         DateTime?         // Track last login time
}

model Prompt {
  id               String          @id @default(cuid())
  title            String
  description      String?
  systemPrompt     String          @db.Text
  model            String
  imageModel       String?
  capabilities     String[]        @default([])
  inputFields      Json            @default("[]")
  tags             String[]        @default([])
  creditCost       Int             @default(100)     // Base cost in credits
  creatorFee       Int             @default(0)       // Creator's fee in credits
  userId           String?
  user             User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  creatorId        String?
  creator          User?           @relation("CreatedPrompts", fields: [creatorId], references: [id], onDelete: SetNull)
  promptFlowSteps  PromptFlowStep[]
  favorites        Favorite[]
  promptRuns       PromptRun[]     // Relation to prompt runs
  outputType       String          @default("text")  // Can be "text" or "image"
  isPrivate        Boolean         @default(false)
  isPublished      Boolean         @default(false)   // Whether the prompt is published
}

model PromptFlow {
  id               String             @id @default(cuid())
  title            String
  description      String?
  steps            PromptFlowStep[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userId           String?
  user             User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  isPublished      Boolean            @default(false)
  totalCreditCost  Int                @default(0)
  unlockPrice      Int                @default(0)     // Price in credits to unlock this flow
  creatorId        String?            // The user who created this flow
  creator          User?              @relation("CreatedFlows", fields: [creatorId], references: [id], onDelete: SetNull)
  unlockedBy       FlowUnlock[]     // Relation to track which users have unlocked this flow
  favorites        Favorite[]
  isPrivate        Boolean            @default(false) // Whether the flow is private
  unlockFee        Int?               // Optional fee to unlock (null means free)
}

model PromptFlowStep {
  id            String      @id @default(cuid())
  flow          PromptFlow  @relation(fields: [flowId], references: [id], onDelete: Cascade)
  flowId        String
  prompt        Prompt      @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId      String
  order         Int
  title         String?
  inputMappings Json        @default("[]")
  position      Int         @default(0) // Position in the flow (for ordering)
  model         String?     // Optional override for the model
}

model Favorite {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  promptId  String?
  prompt    Prompt?     @relation(fields: [promptId], references: [id], onDelete: Cascade)
  flowId    String?
  flow      PromptFlow? @relation(fields: [flowId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())

  @@unique([userId, promptId, flowId])
}

// Credit bucket type for different credit sources
enum CreditBucketType {
  PURCHASED
  BONUS
  REFERRAL
}

// Model to store credit buckets with different sources and expiry
model CreditBucket {
  id        String          @id @default(cuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String          // 'purchased', 'bonus', 'referral'
  amount    Int            // Total amount of credits in this bucket
  remaining Int            // Remaining credits in this bucket
  source    String          // Where these credits came from (e.g., 'stripe_payment:id', 'referral:userId')
  expiresAt DateTime?      // When these credits expire (null = never)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([userId])
  @@index([type])
}

// Model to track automation bonuses
model CreditBonus {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Int      // Amount of bonus credits
  reason      String   // Reason for bonus (e.g., 'automation_monthly')
  monthlyBurn Int      // Monthly burn that triggered this bonus
  createdAt   DateTime @default(now())
}


// Model to track credit transactions with typed reasons
model CreditTransaction {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount              Int      // Can be positive (add) or negative (deduct)
  description         String   // Human-readable description
  type                String   // Type of transaction
  createdAt           DateTime @default(now())
  promptId            String?  // ID of related prompt
  flowId              String?  // ID of related flow
  modelId             String?  // ID of the model used
  creatorId           String?  // ID of the creator (if applicable)
  creatorFeePercentage Int?    @default(0) // Creator fee percentage
  itemType            String?  @default("completion") // Type of item (prompt, flow, etc.)
  itemId              String?  // ID of the related item
  creditsUsed         Int?     @default(0) // Credits used in this transaction
  promptLength        String?  @default("medium") // Length of the prompt
  
  creator             User?    @relation("CreatorTransactions", fields: [creatorId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([creatorId])
}

// Model to track unlocked flows
model FlowUnlock {
  id         String     @id @default(cuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  flowId     String
  flow       PromptFlow @relation(fields: [flowId], references: [id], onDelete: Cascade)
  credits    Int        // Credits spent to unlock
  createdAt  DateTime   @default(now())

  @@unique([userId, flowId])
}

// Model to track prompt runs with detailed cost breakdown
model PromptRun {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  promptId      String
  prompt        Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  model         String   // The model used
  cost          Int      // Total cost in credits
  creatorFee    Int      // Creator fee portion
  inferenceCost Int      // Base inference cost
  platformFee   Int      // Platform fee portion
  createdAt     DateTime @default(now())
  success       Boolean  @default(true)
}

// Model to track waitlist signups
model Waitlist {
  id          String   @id @default(cuid())
  email       String   @unique
  joinedAt    DateTime @default(now())
  source      String?  // Where the signup came from
  ipAddress   String?  // IP address (hashed)
  isNotified  Boolean  @default(false) // Whether they've been notified about launch
  notes       String?  // Admin notes
}

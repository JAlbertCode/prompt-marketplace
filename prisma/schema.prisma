// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  prompts         Prompt[]
  flows           Flow[]
  favoritePrompts FavoritePrompt[]
  favoriteFlows   FavoriteFlow[]
  flowUnlocks     FlowUnlock[] // Add this relation
  credits         UserCredits?
  transactions    CreditTransaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// PromptFlow Models
model Prompt {
  id             String   @id @default(cuid())
  title          String
  description    String?
  template       String   @db.Text
  model          String   // gpt-4, gpt-4o, or gpt-image-1
  inputSchema    Json
  outputExpectations Json?
  creatorFee     Int?     // in credits
  isPublished    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  creator        User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId      String
  
  flows          FlowPrompt[]
  favorites      FavoritePrompt[]
}

model Flow {
  id             String   @id @default(cuid())
  title          String
  description    String?
  unlockFee      Int?     // in credits, null means free
  isPublished    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  creator        User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId      String
  
  prompts        FlowPrompt[]
  favorites      FavoriteFlow[]
  unlocks        FlowUnlock[]
}

model FlowPrompt {
  id             String   @id @default(cuid())
  order          Int
  
  flow           Flow     @relation(fields: [flowId], references: [id], onDelete: Cascade)
  flowId         String
  
  prompt         Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId       String
  
  @@unique([flowId, order])
}

model FavoritePrompt {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  
  prompt         Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId       String
  
  @@unique([userId, promptId])
}

model FavoriteFlow {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  
  flow           Flow     @relation(fields: [flowId], references: [id], onDelete: Cascade)
  flowId         String
  
  @@unique([userId, flowId])
}

model FlowUnlock {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  
  flow           Flow     @relation(fields: [flowId], references: [id], onDelete: Cascade)
  flowId         String
  
  @@unique([userId, flowId])
}

// Credit System
model UserCredits {
  id             String   @id @default(cuid())
  balance        Int      @default(0)
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @unique
}

model CreditTransaction {
  id             String   @id @default(cuid())
  amount         Int
  description    String
  type           TransactionType
  createdAt      DateTime @default(now())
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
}

enum TransactionType {
  PURCHASE
  PROMPT_RUN
  FLOW_UNLOCK
  CREATOR_PAYMENT
  PLATFORM_FEE
  REFERRAL_BONUS
}